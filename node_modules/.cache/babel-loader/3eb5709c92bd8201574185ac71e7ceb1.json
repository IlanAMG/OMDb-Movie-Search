{"ast":null,"code":"var _jsxFileName = \"/Users/Ilan/PROGRAMMATION/FORMATION/UDEMY_OMDdAPI_Films/starter/omdb-movie-starter/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Links, FavoriteBtn, Header, Modal, Result, Results, SearchForm } from './components';\nimport { read } from './firebase/firebase';\nconst constants = {\n  BASE_URL: 'http://www.omdbapi.com/?',\n  API_KEY: 'c044a8f8'\n};\n\nconst App = () => {\n  const [state, setState] = useState({\n    isSearching: false,\n    active: \"search\",\n    movies: [],\n    favorites: [],\n    query: \"\",\n    //resultat de la requête,\n    currentUser: null\n  });\n\n  const onTextChange = input => {\n    setState({ ...state,\n      isSearching: input.length > 0,\n      query: input\n    }); // on verifie si l'user tape ou non\n  };\n\n  const handleClick = link => {\n    setState({ ...state,\n      active: link,\n      query: \"\"\n    });\n  };\n\n  const toggleFavorite = () => {\n    fetchDB();\n  };\n\n  const fetchAPI = () => {\n    if (!state.query) {\n      return;\n    }\n\n    const url = `${constants.BASE_URL}s=${state.query}&apikey=${constants.API_KEY}`;\n    fetch(url).then(res => {\n      if (!res.ok) {\n        throw Error(res.statusText);\n      }\n\n      return res.json();\n    }).then(data => {\n      if (data.Response !== 'False') setState({ ...state,\n        movies: create(data.Search)\n      });\n    });\n  };\n\n  const fetchDB = () => {\n    read().then(snapshot => {\n      const favorites = snapshot.docs.map(doc => doc.data());\n      const imdbs = favorites.map(fav => fav.imdb);\n      const updated = state.movies.map(movie => {\n        movie.isFavorite = imdbs.includes(movie.imdb);\n        return movie;\n      });\n      setState({ ...state,\n        favorites: favorites,\n        movies: updated\n      });\n    }).catch(err => console.log(err));\n  };\n\n  const create = data => {\n    const imdbs = state.favorites.map(fav => fav.imdb);\n    return data.map(item => {\n      return {\n        title: item.Title,\n        imdb: item.imdbID,\n        year: item.Year,\n        type: item.Type,\n        poster: item.Poster,\n        isFavorite: imdbs.includes(item.imdbID)\n      };\n    });\n  };\n\n  useEffect(() => {\n    fetchAPI();\n  }, [state.query]);\n  useEffect(() => {\n    fetchDB();\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"App\",\n    id: \"search-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(Modal, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), React.createElement(Links, Object.assign({}, state, {\n    handleClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  })), React.createElement(\"main\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(SearchForm, {\n    query: state.query,\n    onTextChange: onTextChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(Results, Object.assign({}, state, {\n    toggleFavorite: toggleFavorite,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/Ilan/PROGRAMMATION/FORMATION/UDEMY_OMDdAPI_Films/starter/omdb-movie-starter/src/App.js"],"names":["React","useState","useEffect","Links","FavoriteBtn","Header","Modal","Result","Results","SearchForm","read","constants","BASE_URL","API_KEY","App","state","setState","isSearching","active","movies","favorites","query","currentUser","onTextChange","input","length","handleClick","link","toggleFavorite","fetchDB","fetchAPI","url","fetch","then","res","ok","Error","statusText","json","data","Response","create","Search","snapshot","docs","map","doc","imdbs","fav","imdb","updated","movie","isFavorite","includes","catch","err","console","log","item","title","Title","imdbID","year","Year","type","Type","poster","Poster"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {Links, FavoriteBtn, Header, Modal, Result, Results, SearchForm} from './components'\nimport { read } from './firebase/firebase'\n\nconst constants = {\n  BASE_URL: 'http://www.omdbapi.com/?',\n  API_KEY: 'c044a8f8'\n}\n\nconst App = () => {\n  const [state, setState] = useState({\n    isSearching: false,\n    active: \"search\",\n    movies: [],\n    favorites: [],\n    query: \"\", //resultat de la requête,\n    currentUser: null\n  });\n\n  const onTextChange = input => {\n    setState({ ...state, isSearching: input.length > 0, query: input }) // on verifie si l'user tape ou non\n  }\n\n  const handleClick = link => {\n    setState({...state, active: link, query: \"\"})\n  }\n\n  const toggleFavorite = () => {\n    fetchDB()\n  }\n\n  const fetchAPI = () => {\n    if(!state.query) { return }\n    const url = `${constants.BASE_URL}s=${state.query}&apikey=${constants.API_KEY}`\n    fetch(url)\n      .then(res => {\n        if(!res.ok) { throw Error(res.statusText)}\n        return res.json()\n      })\n      .then(data => {\n        if(data.Response !== 'False')\n        setState({...state, movies: create(data.Search)})\n      })\n  }\n\n  const fetchDB = () => {\n    read()\n    .then(snapshot => {\n      const favorites = snapshot.docs.map(doc => doc.data())\n      const imdbs = favorites.map(fav => fav.imdb)\n      const updated = state.movies.map(movie => {\n        movie.isFavorite = imdbs.includes(movie.imdb)\n        return movie\n      })\n      setState({...state, favorites: favorites, movies: updated})\n    })\n    .catch(err => console.log(err))\n  }\n\n  const create = data => {\n    const imdbs = state.favorites.map(fav => fav.imdb)\n    return data.map(item => {\n      return {title: item.Title, imdb: item.imdbID, year: item.Year, type: item.Type, poster: item.Poster, isFavorite: imdbs.includes(item.imdbID)}\n    })\n  }\n\n  useEffect(() => {\n    fetchAPI()\n  }, [state.query])\n\n  useEffect(() => {\n    fetchDB()\n  }, [])\n\n  return (\n    <div className=\"App\" id=\"search-container\">\n      <Header />\n      <Modal />\n      <Links {...state} handleClick={handleClick}/>\n      <main>\n        <SearchForm query={state.query} onTextChange={onTextChange}/>\n        <Results {...state} toggleFavorite={toggleFavorite} />\n      </main>\n    </div>\n  );\n};\nexport default App;\n"]},"metadata":{},"sourceType":"module"}